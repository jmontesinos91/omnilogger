// Code generated by mockery v2.50.2. DO NOT EDIT.

package logsmock

import (
	context "context"
	"github.com/jmontesinos91/omnilogger/internal/repositories/logs"

	mock "github.com/stretchr/testify/mock"
)

// IRepository is an autogenerated mock type for the IRepository type
type IRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, model
func (_m *IRepository) Create(ctx context.Context, model *logs.Model) error {
	ret := _m.Called(ctx, model)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *logs.Model) error); ok {
		r0 = rf(ctx, model)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByID provides a mock function with given fields: ctx, ID, filter
func (_m *IRepository) FindByID(ctx context.Context, ID *string, filter logs.Filter) (*logs.Model, error) {
	ret := _m.Called(ctx, ID, filter)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 *logs.Model
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *string, logs.Filter) (*logs.Model, error)); ok {
		return rf(ctx, ID, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *string, logs.Filter) *logs.Model); ok {
		r0 = rf(ctx, ID, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*logs.Model)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *string, logs.Filter) error); ok {
		r1 = rf(ctx, ID, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Retrieve provides a mock function with given fields: ctx, filter
func (_m *IRepository) Retrieve(ctx context.Context, filter logs.Filter) ([]logs.Model, int, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for Retrieve")
	}

	var r0 []logs.Model
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, logs.Filter) ([]logs.Model, int, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, logs.Filter) []logs.Model); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]logs.Model)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, logs.Filter) int); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, logs.Filter) error); ok {
		r2 = rf(ctx, filter)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewIRepository creates a new instance of IRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IRepository {
	mock := &IRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
